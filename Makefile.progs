# Making programs

# NOTE: Include this makefile from top one, do not run it directly!

# NOTE: This makefile requires already defined variables:
#	AUTHOR, PROJECT, PLATFORM, BUILDDIR, CMACROS, LIBS, GMA, FIRST_FIT

CC_U = gcc
LINK_U = ld

CFLAGS_U =  -m32 -Wall -ffreestanding -nostdlib -fno-stack-protector \
	-fdata-sections -ffunction-sections -g

LDSCRIPT_U = arch/$(PLATFORM)/user.ld
LDFLAGS_U =  -melf_i386 -T $(LDSCRIPT_U) --gc-sections

#------------------------------------------------------------------------------

BUILD_U := $(BUILDDIR)/progs

DIRS_U := programs/api $(LIBS)
INCLUDES_U := . programs arch/$(PLATFORM)

CMACROS_U := $(CMACROS) U_DEBUG ASSERT_H=\<api/errno.h\>

#------------------------------------------------------------------------------
# Memory
# Memory allocators: 'gma' and/or 'first_fit'

MEM_ALLOCATOR_FOR_USER = $(GMA)

CMACROS_U += MEM_ALLOCATOR_FOR_USER=$(MEM_ALLOCATOR_FOR_USER)


#------------------------------------------------------------------------------
# Programs to include in compilation

# Define each program with:
# prog_name = 1_heap-size 2_stack-size 3_starting-routine 4_directories
# (in script used with $(word n,prog_name)   ($(word n,$($1)))

hello		= 0x10000 0x10000 0x1000 hello_world	programs/hello_world
timer		= 0x10000 0x10000 0x1000 timer		programs/timer
keyboard	= 0x10000 0x10000 0x1000 keyboard	programs/keyboard
args		= 0x10000 0x10000 0x1000 arguments	programs/arguments
uthreads	= 0x10000 0x10000 0x1000 user_threads	programs/user_threads
threads		= 0x10000 0x10000 0x1000 threads	programs/threads
semaphores	= 0x10000 0x10000 0x1000 semaphores	programs/semaphores
monitors	= 0x10000 0x10000 0x1000 monitors	programs/monitors
messages	= 0x10000 0x10000 0x1000 messages	programs/messages
shell		= 0x10000 0x10000 0x1000 shell		programs/shell
rr		= 0x10000 0x10000 0x1000 round_robin	programs/round_robin
edf		= 0x10000 0x10000 0x1000 edf		programs/earliest_deadline_first

#PROGRAMS = hello timer keyboard args shell uthreads threads semaphores monitors \
#messages rr edf
PROGRAMS = shell rr edf


# Programs compilation through template ----------------------------------------

# Template is parsed twice:
# 1) when "called" - when expanded on every "call" location;
#    all "simple" variables and functions are evaluated
#    (variables and functions defined with single $ character)
#    Other ("complex") variables and function are left (but one $ is removed)
# 2) when "final" makefile is parsed


# Template is called with: $(call PROGRAM_TEMPLATE,prog_name)
define PROGRAM_TEMPLATE

$(1)_HEAP_SIZE := $(word 1,$($(1)))
$(1)_STACK_SIZE := $(word 2,$($(1)))
$(1)_THREAD_STACK_SIZE := $(word 3,$($(1)))
$(1)_INIT := $(word 4,$($(1)))

$(1)_MACROS := $(CMACROS_U) HEAP_SIZE=$$($(1)_HEAP_SIZE) \
		STACK_SIZE=$$($(1)_STACK_SIZE) \
		THREAD_STACK_SIZE=$$($(1)_THREAD_STACK_SIZE)\
		PROG_START_FUNC=$$($(1)_INIT) \
		PROG_HELP=$(1)_prog_help_msg

$(1)_DIRS := $(wordlist 5,$(words $($(1))),$($(1))) $(DIRS_U)

$(1)_FILES    := $$(foreach DIR,$$($(1)_DIRS),$$(wildcard $$(DIR)/*.c $$(DIR)/*.S))
$(1)_BUILDDIR := $(BUILD_U)/$(1)
$(1)_BDIRS    := $$(addprefix $$($(1)_BUILDDIR)/,$$($(1)_DIRS))
$(1)_OBJS     := $$(addprefix $$($(1)_BUILDDIR)/,$$($(1)_FILES))
$(1)_OBJS     := $$($(1)_OBJS:.c=.o)
$(1)_OBJS     := $$($(1)_OBJS:.S=.asm.o)
$(1)_DEPS     := $$($(1)_OBJS:.o=.d)
$(1)_TARGET   := $(BUILD_U)/$(1).bin

OBJS_U        += $$($(1)_OBJS)
DEPS_U        += $$($(1)_DEPS)
PROGRAMS_BIN  += $$($(1)_TARGET)


# dummy file that indicate directories are created
$(1)_DIRS_CREATED := $$($(1)_BUILDDIR)/.null

#create directories for objects
$$($(1)_DIRS_CREATED):
	@if [ ! -e $$($(1)_BUILDDIR) ]; then mkdir -p $$($(1)_BUILDDIR); fi;
	@$$(foreach DIR,$$($(1)_BDIRS), if [ ! -e $$(DIR) ]; \
		then mkdir -p $$(DIR); fi; )
	@touch $$($(1)_DIRS_CREATED)
	@echo "\nCompiling program >>> $(1) <<< ..."

#define how to compile .c files
$$($(1)_BUILDDIR)/%.o: %.c Makefile.progs
	@echo [compiling '$(1)'] $$< ...
	@$$(CC_U) -c $$< -o $$@ -MMD $$(CFLAGS_U) \
		$$(foreach INC,$$(INCLUDES_U),-I $$(INC)) \
		$$(foreach MACRO,$$($(1)_MACROS),-D $$(MACRO))

#define how to compile .S files (assembler)
$$($(1)_BUILDDIR)/%.asm.o: %.S Makefile.progs
	@echo [compiling '$(1)'] $$< ...
	@$$(CC_U) -c $$< -o $$@ -MMD $$(CFLAGS_U) \
		$$(foreach INC,$$(INCLUDES_U),-I$$(INC)) \
		$$(foreach MACRO,$$($(1)_MACROS),-D $$(MACRO))

#target
$$($(1)_TARGET): $$($(1)_DIRS_CREATED) $$($(1)_OBJS) $(LDSCRIPT_U)
	@echo [linking '$(1)'] $$@
	@$$(LINK_U) $$(LDFLAGS_U) $$($(1)_OBJS) -o$$@

endef


# "Call" above template for each program to be included
$(foreach prog,$(PROGRAMS),$(eval $(call PROGRAM_TEMPLATE,$(prog))))
