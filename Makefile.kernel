# Making kernel

# NOTE: Include this makefile from top one, do not run it directly!

# NOTE: This makefile requires already defined variables:
#	AUTHOR, PROJECT, PLATFORM, BUILDDIR, CMACROS, LIBS, GMA, FIRST_FIT

CC_K = gcc
LINK_K = ld

CFLAGS_K = -m32 -Wall -ffreestanding -nostdlib -fno-stack-protector \
	-fdata-sections -ffunction-sections -g
#CFLAGS_K = -O3 -m32 -Wall -ffreestanding -nostdlib -fno-stack-protector \
#	-fdata-sections -ffunction-sections

LDSCRIPT_K = arch/$(PLATFORM)/kernel.ld
LDFLAGS_K = -melf_i386 -T $(LDSCRIPT_K) --gc-sections
#LDFLAGS_K = -O3 -melf_i386 -T $(LDSCRIPT_K) --gc-sections -s

#------------------------------------------------------------------------------
BUILD_K = $(BUILDDIR)/kernel

DIRS_K := arch/$(PLATFORM)/arch arch/$(PLATFORM)/arch/devices \
		kernel devices $(LIBS)
INCLUDES_K := . programs arch/$(PLATFORM)

KERNEL_FILE_NAME = kernel.elf
KERNEL_IMG = $(BUILDDIR)/$(KERNEL_FILE_NAME)

K_INIT_PROG = edf
#K_INIT_PROG = shell

CMACROS_K := $(CMACROS) DEBUG ASSERT_H=\<kernel/errno.h\> \
		K_INIT_PROG=\"$(K_INIT_PROG)\"

#------------------------------------------------------------------------------
# Memory allocators: 'gma' and/or 'first_fit'

MEM_ALLOCATOR_FOR_KERNEL = $(FIRST_FIT)

CMACROS_K += MEM_ALLOCATOR_FOR_KERNEL=$(MEM_ALLOCATOR_FOR_KERNEL)

#------------------------------------------------------------------------------

FILES_K := $(foreach DIR,$(DIRS_K),$(wildcard $(DIR)/*.c $(DIR)/*.S))
OBJS_K := $(addprefix $(BUILD_K)/,$(FILES_K:.c=.o))
OBJS_K := $(OBJS_K:.S=.asm.o)
DEPS_K := $(OBJS_K:.o=.d)

# dummy file that indicate directories for kernel objects are created
KDIRS_CREATED = $(BUILD_K)/.null

# create required directories in $(BUILD_K) directory (including $(BUILD_K))
$(KDIRS_CREATED):
	@-if [ ! -e $(BUILD_K) ]; then mkdir -p $(BUILD_K); fi;
	@-$(foreach DIR,$(DIRS_K), if [ ! -e $(BUILD_K)/$(DIR) ]; \
		then mkdir -p $(BUILD_K)/$(DIR); fi; )
	@touch $(KDIRS_CREATED)
	@echo "\nCompiling kernel ..."

# define how to compile .c files
$(BUILD_K)/%.o: %.c Makefile.kernel
	@echo [compiling 'kernel'] $< ...
	@$(CC_K) -c $< -o $@ -MMD $(CFLAGS_K) \
		$(foreach INC,$(INCLUDES_K),-I $(INC)) \
		$(foreach MACRO,$(CMACROS_K),-D $(MACRO))

# define how to compile .S files (assembler)
$(BUILD_K)/%.asm.o: %.S Makefile.kernel
	@echo [compiling 'kernel'] $< ...
	@$(CC_K) -c $< -o $@ -MMD $(CFLAGS_K) \
		$(foreach INC,$(INCLUDES_K),-I$(INC)) \
		$(foreach MACRO,$(CMACROS_K),-D $(MACRO))

# KERNEL image
$(KERNEL_IMG): $(KDIRS_CREATED) $(OBJS_K) $(LDSCRIPT_K)
	@echo [linking 'kernel'] $@
	@$(LINK_K) $(LDFLAGS_K) $(OBJS_K) -o$@
